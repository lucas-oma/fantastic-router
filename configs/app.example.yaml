# Fantastic Router Configuration
# Production-ready configuration for property management domain

# Application metadata
app:
  domain: "property_management"
  base_url: "https://myapp.com"
  version: "1.0.0"
  environment: "${APP_ENV:-development}"
  use_fast_planner: "${USE_FAST_PLANNER:-true}"

# Database configuration
database:
  type: "direct"  # or "api"
  connection_string: "${DATABASE_URL}"
  max_connections: "${DB_MAX_CONNECTIONS:-10}"
  timeout: "${DB_TIMEOUT:-30}"
  
  # API-based database (alternative)
  api:
    endpoint: "https://api.myapp.com/v1"
    token: "${DB_API_TOKEN}"
    schema_endpoint: "/schema"
    search_endpoint: "/search"
    max_requests_per_minute: 100

# Entity definitions
entities:
  person:
    name: "person"
    table: "users"
    description: "People in the system (landlords, tenants, etc.)"
    search_fields: ["name", "email", "first_name", "last_name"]
    display_field: "name"
    unique_identifier: "id"
    related_entities:
      properties: "owns or rents"
      leases: "participates in"
    aliases: ["user", "individual", "contact"]

  property:
    name: "property"
    table: "properties"
    description: "Real estate properties being managed"
    search_fields: ["address", "name", "property_id"]
    display_field: "address"
    unique_identifier: "id"
    related_entities:
      owner: "belongs to"
      tenants: "houses"
    aliases: ["building", "unit", "real estate"]

  lease:
    name: "lease"
    table: "leases"
    description: "Rental agreements between landlords and tenants"
    search_fields: ["lease_id", "property_address"]
    display_field: "lease_id"
    unique_identifier: "id"
    related_entities:
      property: "for"
      tenant: "with"
      landlord: "by"
    aliases: ["rental agreement", "contract"]

# Route patterns and URL structure
routes:
  - pattern: "/{entity_type}/{entity_id}/{view_type}"
    name: "entity_detail_view"
    description: "View specific details for an entity instance"
    intent_patterns:
      - "show {entity} {view_data}"
      - "view {entity} {view_data}"
      - "see {entity} {view_data}"
      - "display {entity} {view_data}"
      - "get {entity} {view_data}"
      - "I want to see {entity} {view_data}"
    parameters:
      entity_type:
        type: "string"
        description: "Type of entity (landlords, tenants, properties)"
        examples: ["landlords", "tenants", "properties"]
        required: true
      entity_id:
        type: "string"
        description: "Unique identifier for the entity"
        examples: ["james-smith-123", "property-456"]
        required: true
      view_type:
        type: "string"
        description: "Type of data to view"
        examples: ["financials", "contact", "overview", "history"]
        required: true
    examples:
      - query: "show me James Smith's monthly income"
        resolved_pattern: "/landlords/james-smith-123/financials"
        reasoning: "entity=James Smith (landlord), view_data=monthly income (financials)"
      - query: "view tenant contact information for John Doe"
        resolved_pattern: "/tenants/john-doe-456/contact"
        reasoning: "entity=John Doe (tenant), view_data=contact information"

  - pattern: "/{entity_type}/{entity_id}/edit"
    name: "entity_edit"
    description: "Edit an entity's information"
    intent_patterns:
      - "edit {entity}"
      - "update {entity}"
      - "modify {entity}"
      - "change {entity}"
      - "update {entity} information"
    parameters:
      entity_type:
        type: "string"
        description: "Type of entity to edit"
        examples: ["landlords", "tenants", "properties"]
        required: true
      entity_id:
        type: "string"
        description: "Unique identifier for the entity"
        examples: ["james-smith-123"]
        required: true
    examples:
      - query: "edit James Smith's information"
        resolved_pattern: "/landlords/james-smith-123/edit"

  - pattern: "/{entity_type}/create"
    name: "entity_create"
    description: "Create a new entity"
    intent_patterns:
      - "create new {entity}"
      - "add {entity}"
      - "register {entity}"
      - "new {entity}"
      - "add new {entity}"
    parameters:
      entity_type:
        type: "string"
        description: "Type of entity to create"
        examples: ["landlords", "tenants", "properties"]
        required: true
    examples:
      - query: "create new property"
        resolved_pattern: "/properties/create"
      - query: "add new tenant"
        resolved_pattern: "/tenants/create"

  - pattern: "/{entity_type}"
    name: "entity_list"
    description: "List all entities of a type"
    intent_patterns:
      - "list all {entity_plural}"
      - "show all {entity_plural}"
      - "view {entity_plural}"
      - "{entity_plural} list"
      - "see all {entity_plural}"
    parameters:
      entity_type:
        type: "string"
        description: "Type of entities to list"
        examples: ["landlords", "tenants", "properties"]
        required: true
    examples:
      - query: "show all properties"
        resolved_pattern: "/properties"
      - query: "list tenants"
        resolved_pattern: "/tenants"

  - pattern: "/{entity_type}/search"
    name: "entity_search"
    description: "Search for entities"
    intent_patterns:
      - "search for {entity}"
      - "find {entity}"
      - "look for {entity}"
      - "search {entity_plural}"
    parameters:
      entity_type:
        type: "string"
        description: "Type of entity to search"
        examples: ["landlords", "tenants", "properties"]
        required: true
    examples:
      - query: "search for properties in downtown"
        resolved_pattern: "/properties/search"

# Database schema definition
schema:
  tables:
    users:
      name: "users"
      description: "All users in the system"
      primary_key: "id"
      columns:
        - name: "id"
          type: "uuid"
          nullable: false
          description: "Unique user ID"
        - name: "name"
          type: "varchar"
          nullable: false
          description: "Full name"
        - name: "email"
          type: "varchar"
          nullable: false
          description: "Email address"
        - name: "phone"
          type: "varchar"
          nullable: true
          description: "Phone number"
        - name: "role"
          type: "varchar"
          nullable: false
          description: "User role"

    landlords:
      name: "landlords"
      description: "Property owners who rent out properties"
      primary_key: "id"
      columns:
        - name: "id"
          type: "uuid"
          nullable: false
          description: "Unique landlord ID"
        - name: "user_id"
          type: "uuid"
          nullable: false
          description: "Reference to users table"
        - name: "properties_owned"
          type: "integer"
          nullable: false
          description: "Number of properties owned"
        - name: "monthly_income"
          type: "decimal"
          nullable: true
          description: "Monthly rental income"
        - name: "tax_id"
          type: "varchar"
          nullable: true
          description: "Tax identification number"

    tenants:
      name: "tenants"
      description: "People who rent properties"
      primary_key: "id"
      columns:
        - name: "id"
          type: "uuid"
          nullable: false
          description: "Unique tenant ID"
        - name: "user_id"
          type: "uuid"
          nullable: false
          description: "Reference to users table"
        - name: "lease_id"
          type: "uuid"
          nullable: true
          description: "Current lease"
        - name: "monthly_rent"
          type: "decimal"
          nullable: true
          description: "Monthly rent amount"
        - name: "move_in_date"
          type: "date"
          nullable: true
          description: "When tenant moved in"

    properties:
      name: "properties"
      description: "Real estate properties being managed"
      primary_key: "id"
      columns:
        - name: "id"
          type: "uuid"
          nullable: false
          description: "Unique property ID"
        - name: "address"
          type: "varchar"
          nullable: false
          description: "Property address"
        - name: "owner_id"
          type: "uuid"
          nullable: false
          description: "Reference to landlords table"
        - name: "bedrooms"
          type: "integer"
          nullable: true
          description: "Number of bedrooms"
        - name: "bathrooms"
          type: "decimal"
          nullable: true
          description: "Number of bathrooms"
        - name: "rent_amount"
          type: "decimal"
          nullable: true
          description: "Monthly rent"

  relationships:
    "landlords.user_id": "users.id"
    "tenants.user_id": "users.id"
    "properties.owner_id": "landlords.id"
    "tenants.lease_id": "leases.id"

# Semantic mappings for natural language processing
semantic_mappings:
  income: ["revenue", "earnings", "money", "profit", "rental income"]
  landlord: ["property owner", "lessor", "owner"]
  tenant: ["renter", "lessee", "resident"]
  property: ["building", "unit", "real estate", "apartment"]
  monthly: ["per month", "each month", "every month"]
  contact: ["contact info", "contact details", "phone", "email", "address"]

# Default actions available
default_actions: ["view", "edit", "create", "list", "search"]

# LLM configuration
llm:
  # Global LLM settings (applied to all providers)
  provider: "openai"  # or "anthropic", "gemini", "ollama"
  temperature: "${LLM_TEMPERATURE:-0.1}"
  max_tokens: "${LLM_MAX_TOKENS:-1000}"
  timeout: "${LLM_TIMEOUT:-60}"
  
  # Provider-specific configurations
  openai:
    api_key: "${OPENAI_API_KEY}"
    model: "${OPENAI_MODEL:-gpt-3.5-turbo-1106}"
  
  gemini:
    api_key: "${GEMINI_API_KEY}"
    model: "${GEMINI_MODEL:-gemini-1.5-flash}"
  
  anthropic:
    api_key: "${ANTHROPIC_API_KEY}"
    model: "${ANTHROPIC_MODEL:-claude-3-haiku-20240307}"
  
  ollama:
    base_url: "${OLLAMA_BASE_URL:-http://localhost:11434}"
    model: "${OLLAMA_MODEL:-llama3.1:8b}"

# Logging configuration
logging:
  level: "${LOG_LEVEL:-INFO}"
  format: "json"
  output: "stdout"
  include_timestamps: true

# Security and rate limiting
security:
  rate_limit_per_minute: 100
  max_concurrent_requests: 10
  enable_cors: true
  allowed_origins: ["https://myapp.com", "https://admin.myapp.com"]

# Monitoring and telemetry
monitoring:
  enable_metrics: true
  enable_tracing: true
  metrics_endpoint: "/metrics"
  health_check_endpoint: "/health"
