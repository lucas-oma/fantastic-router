[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fantastic-router-core"
version = "0.1.0"
description = "LLM-powered intent router for web applications - Core library"
readme = "README.md"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["llm", "router", "intent", "natural-language", "navigation"]
requires-python = ">=3.9"

dependencies = [
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "asyncio-throttle>=1.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# LLM provider dependencies
openai = [
    "openai>=1.0.0",
]

anthropic = [
    "anthropic>=0.34.0",
]

gemini = [
    "google-generativeai>=0.3.0",
]

# TODO: make this optional, not everyone will use it.
ollama = [
    "aiohttp>=3.8.0",
]

# Database dependencies
postgres = [
    "asyncpg>=0.28.0",
    "sqlalchemy[asyncio]>=2.0.0",
]

supabase = [
    "supabase>=1.0.0",
    "postgrest>=0.10.0",
]

# Vector database dependencies
faiss = [
    "faiss-cpu>=1.7.0",
    "numpy>=1.20.0",
]

milvus = [
    "pymilvus>=2.3.0",
]

# All optional dependencies
all = [
    "fantastic-router-core[openai,anthropic,gemini,ollama,postgres,supabase,faiss,milvus]",
]

[project.urls]
Homepage = "https://github.com/yourusername/fantastic-router"
Repository = "https://github.com/yourusername/fantastic-router"
Documentation = "https://fantastic-router.readthedocs.io"
"Bug Reports" = "https://github.com/yourusername/fantastic-router/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=fantastic_router_core",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["fantastic_router_core"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
